#!/usr/bin/env python3
import sys
import requests
import os
import json
from pprint import pprint

endpoint = os.environ.get("SERVER_PATH")

def show_help():
    print("""uso: tarefa <comando> <parametros>
    comandos possíveis:
    $ tarefa adicionar '<conteudo>' - Adiciona nova tarefa com o conteúdo fornecido
    $ tarefa listar - Lista todas as tarefas disponíveis
    $ tarefa buscar <id> - Busca a tarefa com o id fornecido
    $ tarefa apagar <id> - Apaga a tarefa com o id fornecido
    $ tarefa atualizar <id> '<novo conteudo>' - Atualiza a tarefa de id fornecido com o conteudo fornecido
    """)

def adicionar(content):
    data = {
        'content': content
    }
    req = requests.post(endpoint + '/task', data=json.dumps(data))
    pprint(req.json())

def listar():
    req = requests.get(endpoint + '/task')
    pprint(req.json())

def buscar(id):
    req = requests.get(endpoint + f'/task/{id}')
    pprint(req.json())

def apagar(id):
    req = requests.delete(endpoint + f'/task/{id}')
    pprint(req.json())

def atualizar(id, content):
    req = requests.put(endpoint + f'/task/{id}', data=json.dumps({'content': content}))
    pprint(req.json())

def main():
    inputs = sys.argv
    commands = ['adicionar', 'listar', 'buscar', 'apagar', 'atualizar']

    if not endpoint:
        print('Server endpoint not configured, please run $ source ./configaddr.sh')
        exit()

    if ('--help' in inputs or '--h' in inputs or '-h' in inputs):
        show_help()
        exit()
    
    # Valid input 
    if len(inputs) > 1 and inputs[1] in commands:
        

        command = inputs[1]

        if command == commands[0]:
            try:
                adicionar(inputs[2])
            except:
                print("Argumento inválido, uso $ tarefa.py adicionar '<conteudo>'")    
        elif command == commands[1]:
            listar()
        elif command == commands[2]:
            try:
                buscar(inputs[2])
            except:
                print('Argumento inválido, uso $ tarefa.py buscar <id>')    
        elif command == commands[3]:
            try:
                print()
                apagar(inputs[2])
            except:
                print('Argumento inválido, uso $ tarefa.py apagar <id>')
            
        elif command == commands[4]:
            try:
                atualizar(inputs[2], inputs[3])
            except:
                print("Argumentos inválidos, uso $ tarefa.py atualizar <id> '<novo conteudo>'")
    else:
        print('argumentos incorretos, tente usar um dos seguintes, ou use --help', commands)
        exit()

if __name__ == '__main__':
    main()